/*Definitions*/
DIGIT       [0-9]
LETTER      [a-zA-Z_]
EXPONENTIAL [Ee][+-]?{DIGIT}+
FS          (f|F|l|LETTER)
IS          (u|U|l|LETTER)*

/*Header*/
%{

    #include <stdio.h>
    #include <string.h>
    #include <stdlib.h>
    #include <ctype.h>
    #include "y.tab.h"

    /*Data structures for links in symbol lookahead*/
    struct symrec{
        char *name;             //Symbol name
        int type;               //Symbol type
        double value;           //Variable lookahead value
        int function;           //Function
        struct symrec *next;    //Next register pointer
    };

    typedef struct symrec symrec;

    /*Symbol table*/
    extern symrec *sym_table;

    /*Symbol table interactions*/
    symrec *putsym ();
    symrec *getsym ();

    int line_number;            //Line number
    void comment(void);         //Comments
    void line_comment(void);    //Line comment
    void count();               //Counter

%}

/*Tokens definition*/
%%

"/*"                                            { comment(); }
"//"                                            { line_comment(); }
"#include ""<"((_|{LETTER}*)"."{LETTER}*)">"    { }
"const"                                         { return(CONST); }
"printf"                                        { yylval.name = strdup(yytext); return(PRINTFF); }

"char"                                          { yylval.type = CHAR; return(CHAR); }
"double"                                        { yylval.type = DOUBLE; return(DOUBLE); }
"float"                                         { yylval.type = FLOAT; return(FLOAT); }
"int"                                           { yylval.type = INT; return(INT); }
"signed"                                        { yylval.type = SIGNED; return(SIGNED); }
"unsigned"                                      { yylval.type = UNSIGNED; return(UNSIGNED); }
"void"                                          { yylval.type = VOID; return(VOID); }


