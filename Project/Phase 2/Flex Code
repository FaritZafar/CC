%{

#include <stdlib.h>
#include <stdio.h>
#include "symboltable.h"
#include "tokens.h"

entry_t** symbol_table;
entry_t** constant_table;

int cmnt_strt = 0;

%}

letter [a-zA-Z]
digit [0-9]
ws  [ \t\r\f\v]+
identifier (_|{letter})({letter}|{digit}|_){0,31}
hex [0-9a-f]

 /* Exclusive states */
%x CMNT
%x PREPROC

%%
  /* Keywords*/
"int"                             {printf("\t%-30s : Data Type\n",yytext);}
"long"                            {printf("\t%-30s : Data Type\n",yytext);}
"long long"                       {printf("\t%-30s : Data Type\n",yytext);}
"short"                           {printf("\t%-30s : Data Type\n",yytext);}
"signed"                          {printf("\t%-30s : Data Type\n",yytext);}
"unsigned"                        {printf("\t%-30s : Data Type\n",yytext);}
"for"                             {printf("\t%-30s : Keyword\n",yytext);}
"break"                           {printf("\t%-30s : Keyword\n",yytext);}
"continue"                        {printf("\t%-30s : Keyword\n",yytext);}
"if"                              {printf("\t%-30s : Keyword\n",yytext);}
"else"                            {printf("\t%-30s : Keyword\n",yytext);}
"return"                          {printf("\t%-30s : Keyword\n",yytext);}

{identifier}                      {printf("\t%-30s : Identifier\n", yytext);
 insert( symbol_table,yytext,IDENTIFIER );}
{ws}                              ;
[+\-]?[0][x|X]{hex}+[lLuU]?        {printf("\t%-30s : Hex Constant\n", yytext);
insert( constant_table,yytext,HEX_CONSTANT);}
[+\-]?{digit}+[lLuU]?              {printf("\t%-30s : Dec Constant\n", yytext);
									insert( constant_table,yytext,DEC_CONSTANT);}
"/*"                              {cmnt_strt = yylineno; BEGIN CMNT;}
<CMNT>.|{ws}                      ;
<CMNT>\n                          {yylineno++;}
<CMNT>"*/"                        {BEGIN INITIAL;}
<CMNT>"/*"                        {printf("Line %3d: Nested comments are not valid!\n",yylineno);}
<CMNT><<EOF>>                     {printf("Line %3d: Unterminated comment\n", cmnt_strt); yyterminate();}
^"#include"                       {BEGIN PREPROC;}
<PREPROC>"<"[^<>\n]+">"            {printf("\t%-30s : %3d\n",yytext,HEADER_FILE);}
<PREPROC>{ws}                       ;
<PREPROC>\"[^"\n]+\"              {printf("\t%-30s : %3d\n",yytext,HEADER_FILE);}
<PREPROC>\n                       {yylineno++; BEGIN INITIAL;}
<PREPROC>.                        {printf("Line %3d: Illegal header file format \n",yylineno);}
"//".*                            ;

\"[^\"\n]*\"     {

  if(yytext[yyleng-2]=='\\') /* check if it was an escaped quote */
  {
    yyless(yyleng-1);       /* push the quote back if it was escaped */
    yymore();
  }
 else
  insert( constant_table,yytext,STRING);
}
\"[^\"\n]*$                     {printf("Line %3d: Unterminated string %s\n",yylineno,yytext);}
{digit}+({letter}|_)+	        {printf("Line %3d: Illegal identifier name %s\n",yylineno,yytext);}
\n                              {yylineno++;}
"--"			                {printf("\t%-30s : Operator\n",yytext);}
"++"			                {printf("\t%-30s : Operator\n",yytext);}
"->"			                {printf("\t%-30s : Operator\n",yytext);}
"&&"			                {printf("\t%-30s : Operator",yytext);}
"||"			                {printf("\t%-30s : Operator\n",yytext);}
"<="			                {printf("\t%-30s : Operator\n",yytext);}
">="			                {printf("\t%-30s : Operator\n",yytext);}
"=="			                {printf("\t%-30s : Operator\n",yytext);}
"!="		                    {printf("\t%-30s : Operator\n",yytext);}
";"			                    {printf("\t%-30s : Terminator\n",yytext);}
"{"                             {printf("\t%-30s : Parentheses\n",yytext);}
"}"                             {printf("\t%-30s : Parentheses\n",yytext);}
","			                    {printf("\t%-30s : Parentheses\n",yytext);}
"="			                    {printf("\t%-30s : Parentheses\n",yytext);}
"("			                    {printf("\t%-30s : Parentheses\n",yytext);}
")"			                    {printf("\t%-30s : Parentheses\n",yytext);}
"["                             {printf("\t%-30s : Parentheses\n",yytext);}
"]"                             {printf("\t%-30s : Parentheses\n",yytext);}
"-"			                    {printf("\t%-30s : Operator\n",yytext);}
"+"			                    {printf("\t%-30s : Operator\n",yytext);}
"*"			                    {printf("\t%-30s : Operator\n",yytext);}
"/"		                        {printf("\t%-30s : Operator\n",yytext);}
"%"			                    {printf("\t%-30s : Operator\n",yytext);}
"<"			                    {printf("\t%-30s : Operator\n",yytext);}
">"			                    {printf("\t%-30s : Operator\n",yytext);}
.                               {printf("Line %3d: Illegal character %s\n",yylineno,yytext);}

%%

int main()
{
  yyin=fopen("testcases/test-case-5.c","r");
  symbol_table=create_table();
  constant_table=create_table();
  yylex();
  printf("\n\tSymbol table");
  display(symbol_table);
  printf("\n\tConstants Table");
  display(constant_table);
}
